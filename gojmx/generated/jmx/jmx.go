// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package jmx

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type ValueType int64
const (
  ValueType_STRING ValueType = 1
  ValueType_DOUBLE ValueType = 2
  ValueType_INT ValueType = 3
  ValueType_BOOL ValueType = 4
)

func (p ValueType) String() string {
  switch p {
  case ValueType_STRING: return "STRING"
  case ValueType_DOUBLE: return "DOUBLE"
  case ValueType_INT: return "INT"
  case ValueType_BOOL: return "BOOL"
  }
  return "<UNSET>"
}

func ValueTypeFromString(s string) (ValueType, error) {
  switch s {
  case "STRING": return ValueType_STRING, nil 
  case "DOUBLE": return ValueType_DOUBLE, nil 
  case "INT": return ValueType_INT, nil 
  case "BOOL": return ValueType_BOOL, nil 
  }
  return ValueType(0), fmt.Errorf("not a valid ValueType string")
}


func ValueTypePtr(v ValueType) *ValueType { return &v }

func (p ValueType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ValueType) UnmarshalText(text []byte) error {
q, err := ValueTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ValueType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ValueType(v)
return nil
}

func (p * ValueType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// That just about covers the basics. Take a look in the test/ folder for more
// detailed examples. After you run this file, your generated code shows up
// in folders with names gen-<language>. The generated code isn't too scary
// to look at. It even has pretty indentation.
// 
// Attributes:
//  - ConnURL
//  - Hostname
//  - Port
//  - UriPath
//  - Username
//  - Password
//  - KeyStore
//  - KeyStorePassword
//  - TrustStore
//  - TrustStorePassword
//  - IsRemote
//  - IsJBossStandaloneMode
type JMXConfig struct {
  ConnURL string `thrift:"connURL,1" db:"connURL" json:"connURL"`
  Hostname string `thrift:"hostname,2" db:"hostname" json:"hostname"`
  Port int32 `thrift:"port,3" db:"port" json:"port"`
  UriPath string `thrift:"uriPath,4" db:"uriPath" json:"uriPath"`
  Username string `thrift:"username,5" db:"username" json:"username"`
  Password string `thrift:"password,6" db:"password" json:"password"`
  KeyStore string `thrift:"keyStore,7" db:"keyStore" json:"keyStore"`
  KeyStorePassword string `thrift:"keyStorePassword,8" db:"keyStorePassword" json:"keyStorePassword"`
  TrustStore string `thrift:"trustStore,9" db:"trustStore" json:"trustStore"`
  TrustStorePassword string `thrift:"trustStorePassword,10" db:"trustStorePassword" json:"trustStorePassword"`
  IsRemote bool `thrift:"isRemote,11" db:"isRemote" json:"isRemote"`
  IsJBossStandaloneMode bool `thrift:"isJBossStandaloneMode,12" db:"isJBossStandaloneMode" json:"isJBossStandaloneMode"`
}

func NewJMXConfig() *JMXConfig {
  return &JMXConfig{}
}


func (p *JMXConfig) GetConnURL() string {
  return p.ConnURL
}

func (p *JMXConfig) GetHostname() string {
  return p.Hostname
}

func (p *JMXConfig) GetPort() int32 {
  return p.Port
}

func (p *JMXConfig) GetUriPath() string {
  return p.UriPath
}

func (p *JMXConfig) GetUsername() string {
  return p.Username
}

func (p *JMXConfig) GetPassword() string {
  return p.Password
}

func (p *JMXConfig) GetKeyStore() string {
  return p.KeyStore
}

func (p *JMXConfig) GetKeyStorePassword() string {
  return p.KeyStorePassword
}

func (p *JMXConfig) GetTrustStore() string {
  return p.TrustStore
}

func (p *JMXConfig) GetTrustStorePassword() string {
  return p.TrustStorePassword
}

func (p *JMXConfig) GetIsRemote() bool {
  return p.IsRemote
}

func (p *JMXConfig) GetIsJBossStandaloneMode() bool {
  return p.IsJBossStandaloneMode
}
func (p *JMXConfig) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXConfig)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnURL = v
}
  return nil
}

func (p *JMXConfig)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *JMXConfig)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *JMXConfig)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UriPath = v
}
  return nil
}

func (p *JMXConfig)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *JMXConfig)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *JMXConfig)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.KeyStore = v
}
  return nil
}

func (p *JMXConfig)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.KeyStorePassword = v
}
  return nil
}

func (p *JMXConfig)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TrustStore = v
}
  return nil
}

func (p *JMXConfig)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TrustStorePassword = v
}
  return nil
}

func (p *JMXConfig)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IsRemote = v
}
  return nil
}

func (p *JMXConfig)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.IsJBossStandaloneMode = v
}
  return nil
}

func (p *JMXConfig) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JMXConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXConfig) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "connURL", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connURL: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ConnURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.connURL (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connURL: ", p), err) }
  return err
}

func (p *JMXConfig) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostname: ", p), err) }
  return err
}

func (p *JMXConfig) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err) }
  return err
}

func (p *JMXConfig) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uriPath", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uriPath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UriPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uriPath (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uriPath: ", p), err) }
  return err
}

func (p *JMXConfig) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:username: ", p), err) }
  return err
}

func (p *JMXConfig) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:password: ", p), err) }
  return err
}

func (p *JMXConfig) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyStore", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:keyStore: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KeyStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyStore (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:keyStore: ", p), err) }
  return err
}

func (p *JMXConfig) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyStorePassword", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:keyStorePassword: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KeyStorePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyStorePassword (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:keyStorePassword: ", p), err) }
  return err
}

func (p *JMXConfig) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trustStore", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:trustStore: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TrustStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trustStore (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:trustStore: ", p), err) }
  return err
}

func (p *JMXConfig) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trustStorePassword", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:trustStorePassword: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TrustStorePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trustStorePassword (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:trustStorePassword: ", p), err) }
  return err
}

func (p *JMXConfig) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isRemote", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:isRemote: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsRemote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRemote (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:isRemote: ", p), err) }
  return err
}

func (p *JMXConfig) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isJBossStandaloneMode", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isJBossStandaloneMode: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsJBossStandaloneMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isJBossStandaloneMode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isJBossStandaloneMode: ", p), err) }
  return err
}

func (p *JMXConfig) Equals(other *JMXConfig) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ConnURL != other.ConnURL { return false }
  if p.Hostname != other.Hostname { return false }
  if p.Port != other.Port { return false }
  if p.UriPath != other.UriPath { return false }
  if p.Username != other.Username { return false }
  if p.Password != other.Password { return false }
  if p.KeyStore != other.KeyStore { return false }
  if p.KeyStorePassword != other.KeyStorePassword { return false }
  if p.TrustStore != other.TrustStore { return false }
  if p.TrustStorePassword != other.TrustStorePassword { return false }
  if p.IsRemote != other.IsRemote { return false }
  if p.IsJBossStandaloneMode != other.IsJBossStandaloneMode { return false }
  return true
}

func (p *JMXConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXConfig(%+v)", *p)
}

// Attributes:
//  - ValueType
//  - StringValue
//  - DoubleValue
//  - IntValue
//  - BoolValue
type JMXAttributeValue struct {
  ValueType ValueType `thrift:"valueType,1" db:"valueType" json:"valueType"`
  StringValue string `thrift:"stringValue,2" db:"stringValue" json:"stringValue"`
  DoubleValue float64 `thrift:"doubleValue,3" db:"doubleValue" json:"doubleValue"`
  IntValue int64 `thrift:"intValue,4" db:"intValue" json:"intValue"`
  BoolValue bool `thrift:"boolValue,5" db:"boolValue" json:"boolValue"`
}

func NewJMXAttributeValue() *JMXAttributeValue {
  return &JMXAttributeValue{}
}


func (p *JMXAttributeValue) GetValueType() ValueType {
  return p.ValueType
}

func (p *JMXAttributeValue) GetStringValue() string {
  return p.StringValue
}

func (p *JMXAttributeValue) GetDoubleValue() float64 {
  return p.DoubleValue
}

func (p *JMXAttributeValue) GetIntValue() int64 {
  return p.IntValue
}

func (p *JMXAttributeValue) GetBoolValue() bool {
  return p.BoolValue
}
func (p *JMXAttributeValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXAttributeValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ValueType(v)
  p.ValueType = temp
}
  return nil
}

func (p *JMXAttributeValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StringValue = v
}
  return nil
}

func (p *JMXAttributeValue)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DoubleValue = v
}
  return nil
}

func (p *JMXAttributeValue)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IntValue = v
}
  return nil
}

func (p *JMXAttributeValue)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BoolValue = v
}
  return nil
}

func (p *JMXAttributeValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JMXAttributeValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXAttributeValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "valueType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:valueType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ValueType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.valueType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:valueType: ", p), err) }
  return err
}

func (p *JMXAttributeValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stringValue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StringValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringValue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue: ", p), err) }
  return err
}

func (p *JMXAttributeValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "doubleValue", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:doubleValue: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.DoubleValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.doubleValue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:doubleValue: ", p), err) }
  return err
}

func (p *JMXAttributeValue) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intValue", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:intValue: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.IntValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intValue (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:intValue: ", p), err) }
  return err
}

func (p *JMXAttributeValue) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "boolValue", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:boolValue: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BoolValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolValue (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:boolValue: ", p), err) }
  return err
}

func (p *JMXAttributeValue) Equals(other *JMXAttributeValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ValueType != other.ValueType { return false }
  if p.StringValue != other.StringValue { return false }
  if p.DoubleValue != other.DoubleValue { return false }
  if p.IntValue != other.IntValue { return false }
  if p.BoolValue != other.BoolValue { return false }
  return true
}

func (p *JMXAttributeValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXAttributeValue(%+v)", *p)
}

// Attributes:
//  - Attribute
//  - Value
type JMXAttribute struct {
  Attribute string `thrift:"attribute,1" db:"attribute" json:"attribute"`
  Value *JMXAttributeValue `thrift:"value,2" db:"value" json:"value"`
}

func NewJMXAttribute() *JMXAttribute {
  return &JMXAttribute{}
}


func (p *JMXAttribute) GetAttribute() string {
  return p.Attribute
}
var JMXAttribute_Value_DEFAULT *JMXAttributeValue
func (p *JMXAttribute) GetValue() *JMXAttributeValue {
  if !p.IsSetValue() {
    return JMXAttribute_Value_DEFAULT
  }
return p.Value
}
func (p *JMXAttribute) IsSetValue() bool {
  return p.Value != nil
}

func (p *JMXAttribute) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXAttribute)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Attribute = v
}
  return nil
}

func (p *JMXAttribute)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &JMXAttributeValue{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *JMXAttribute) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JMXAttribute"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXAttribute) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attribute", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:attribute: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Attribute)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attribute (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:attribute: ", p), err) }
  return err
}

func (p *JMXAttribute) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := p.Value.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *JMXAttribute) Equals(other *JMXAttribute) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Attribute != other.Attribute { return false }
  if !p.Value.Equals(other.Value) { return false }
  return true
}

func (p *JMXAttribute) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXAttribute(%+v)", *p)
}

// Attributes:
//  - Message
type LogMessage struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewLogMessage() *LogMessage {
  return &LogMessage{}
}


func (p *LogMessage) GetMessage() string {
  return p.Message
}
func (p *LogMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *LogMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LogMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *LogMessage) Equals(other *LogMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *LogMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogMessage(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
type JMXError struct {
  Code *int32 `thrift:"code,1" db:"code" json:"code,omitempty"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewJMXError() *JMXError {
  return &JMXError{}
}

var JMXError_Code_DEFAULT int32
func (p *JMXError) GetCode() int32 {
  if !p.IsSetCode() {
    return JMXError_Code_DEFAULT
  }
return *p.Code
}

func (p *JMXError) GetMessage() string {
  return p.Message
}
func (p *JMXError) IsSetCode() bool {
  return p.Code != nil
}

func (p *JMXError) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXError)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = &v
}
  return nil
}

func (p *JMXError)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *JMXError) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JMXError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCode() {
    if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Code)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  }
  return err
}

func (p *JMXError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *JMXError) Equals(other *JMXError) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code {
    if p.Code == nil || other.Code == nil {
      return false
    }
    if (*p.Code) != (*other.Code) { return false }
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *JMXError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXError(%+v)", *p)
}

func (p *JMXError) Error() string {
  return p.String()
}

func (JMXError) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*JMXError)(nil)

// Attributes:
//  - Code
//  - Message
type JMXConnectionError struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewJMXConnectionError() *JMXConnectionError {
  return &JMXConnectionError{}
}


func (p *JMXConnectionError) GetCode() int32 {
  return p.Code
}

func (p *JMXConnectionError) GetMessage() string {
  return p.Message
}
func (p *JMXConnectionError) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXConnectionError)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *JMXConnectionError)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *JMXConnectionError) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JMXConnectionError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXConnectionError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *JMXConnectionError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *JMXConnectionError) Equals(other *JMXConnectionError) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *JMXConnectionError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXConnectionError(%+v)", *p)
}

func (p *JMXConnectionError) Error() string {
  return p.String()
}

func (JMXConnectionError) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*JMXConnectionError)(nil)

type JMXService interface {
  // A method definition looks like C code. It has a return type, arguments,
  // and optionally a list of exceptions that it may throw. Note that argument
  // lists and exception lists are specified using the exact same syntax as
  // field lists in struct or exception definitions.
  // 
  // Parameters:
  //  - Config
  Connect(ctx context.Context, config *JMXConfig) (_r bool, _err error)
  Disconnect(ctx context.Context) (_err error)
  // Parameters:
  //  - BeanName
  QueryMbean(ctx context.Context, beanName string) (_r []*JMXAttribute, _err error)
  GetLogs(ctx context.Context) (_r []*LogMessage, _err error)
}

type JMXServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewJMXServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *JMXServiceClient {
  return &JMXServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewJMXServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *JMXServiceClient {
  return &JMXServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewJMXServiceClient(c thrift.TClient) *JMXServiceClient {
  return &JMXServiceClient{
    c: c,
  }
}

func (p *JMXServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *JMXServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *JMXServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// A method definition looks like C code. It has a return type, arguments,
// and optionally a list of exceptions that it may throw. Note that argument
// lists and exception lists are specified using the exact same syntax as
// field lists in struct or exception definitions.
// 
// Parameters:
//  - Config
func (p *JMXServiceClient) Connect(ctx context.Context, config *JMXConfig) (_r bool, _err error) {
  var _args0 JMXServiceConnectArgs
  _args0.Config = config
  var _result2 JMXServiceConnectResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "connect", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  switch {
  case _result2.ConnErr!= nil:
    return _r, _result2.ConnErr
  case _result2.JmxErr!= nil:
    return _r, _result2.JmxErr
  }

  return _result2.GetSuccess(), nil
}

func (p *JMXServiceClient) Disconnect(ctx context.Context) (_err error) {
  var _args3 JMXServiceDisconnectArgs
  var _result5 JMXServiceDisconnectResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "disconnect", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  switch {
  case _result5.Err!= nil:
    return _result5.Err
  }

  return nil
}

// Parameters:
//  - BeanName
func (p *JMXServiceClient) QueryMbean(ctx context.Context, beanName string) (_r []*JMXAttribute, _err error) {
  var _args6 JMXServiceQueryMbeanArgs
  _args6.BeanName = beanName
  var _result8 JMXServiceQueryMbeanResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "queryMbean", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  switch {
  case _result8.ConnErr!= nil:
    return _r, _result8.ConnErr
  case _result8.JmxErr!= nil:
    return _r, _result8.JmxErr
  }

  return _result8.GetSuccess(), nil
}

func (p *JMXServiceClient) GetLogs(ctx context.Context) (_r []*LogMessage, _err error) {
  var _args9 JMXServiceGetLogsArgs
  var _result11 JMXServiceGetLogsResult
  var _meta10 thrift.ResponseMeta
  _meta10, _err = p.Client_().Call(ctx, "getLogs", &_args9, &_result11)
  p.SetLastResponseMeta_(_meta10)
  if _err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type JMXServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler JMXService
}

func (p *JMXServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *JMXServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *JMXServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewJMXServiceProcessor(handler JMXService) *JMXServiceProcessor {

  self12 := &JMXServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["connect"] = &jMXServiceProcessorConnect{handler:handler}
  self12.processorMap["disconnect"] = &jMXServiceProcessorDisconnect{handler:handler}
  self12.processorMap["queryMbean"] = &jMXServiceProcessorQueryMbean{handler:handler}
  self12.processorMap["getLogs"] = &jMXServiceProcessorGetLogs{handler:handler}
return self12
}

func (p *JMXServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x13.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x13

}

type jMXServiceProcessorConnect struct {
  handler JMXService
}

func (p *jMXServiceProcessorConnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceConnectArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "connect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceConnectResult{}
  var retval bool
  if retval, err2 = p.handler.Connect(ctx, args.Config); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *JMXConnectionError:
  result.ConnErr = v
    case *JMXError:
  result.JmxErr = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing connect: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "connect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "connect", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorDisconnect struct {
  handler JMXService
}

func (p *jMXServiceProcessorDisconnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceDisconnectArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "disconnect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceDisconnectResult{}
  if err2 = p.handler.Disconnect(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *JMXError:
  result.Err = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "disconnect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "disconnect", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorQueryMbean struct {
  handler JMXService
}

func (p *jMXServiceProcessorQueryMbean) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceQueryMbeanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "queryMbean", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceQueryMbeanResult{}
  var retval []*JMXAttribute
  if retval, err2 = p.handler.QueryMbean(ctx, args.BeanName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *JMXConnectionError:
  result.ConnErr = v
    case *JMXError:
  result.JmxErr = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMbean: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "queryMbean", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "queryMbean", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type jMXServiceProcessorGetLogs struct {
  handler JMXService
}

func (p *jMXServiceProcessorGetLogs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := JMXServiceGetLogsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLogs", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceGetLogsResult{}
  var retval []*LogMessage
  if retval, err2 = p.handler.GetLogs(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLogs: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLogs", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLogs", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Config
type JMXServiceConnectArgs struct {
  Config *JMXConfig `thrift:"config,1" db:"config" json:"config"`
}

func NewJMXServiceConnectArgs() *JMXServiceConnectArgs {
  return &JMXServiceConnectArgs{}
}

var JMXServiceConnectArgs_Config_DEFAULT *JMXConfig
func (p *JMXServiceConnectArgs) GetConfig() *JMXConfig {
  if !p.IsSetConfig() {
    return JMXServiceConnectArgs_Config_DEFAULT
  }
return p.Config
}
func (p *JMXServiceConnectArgs) IsSetConfig() bool {
  return p.Config != nil
}

func (p *JMXServiceConnectArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceConnectArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Config = &JMXConfig{}
  if err := p.Config.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *JMXServiceConnectArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "connect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceConnectArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *JMXServiceConnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceConnectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceConnectResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceConnectResult() *JMXServiceConnectResult {
  return &JMXServiceConnectResult{}
}

var JMXServiceConnectResult_Success_DEFAULT bool
func (p *JMXServiceConnectResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return JMXServiceConnectResult_Success_DEFAULT
  }
return *p.Success
}
var JMXServiceConnectResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceConnectResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceConnectResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceConnectResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceConnectResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceConnectResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceConnectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceConnectResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceConnectResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceConnectResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceConnectResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *JMXServiceConnectResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceConnectResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceConnectResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "connect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceConnectResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceConnectResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin(ctx, "connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceConnectResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin(ctx, "jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceConnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceConnectResult(%+v)", *p)
}

type JMXServiceDisconnectArgs struct {
}

func NewJMXServiceDisconnectArgs() *JMXServiceDisconnectArgs {
  return &JMXServiceDisconnectArgs{}
}

func (p *JMXServiceDisconnectArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceDisconnectArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "disconnect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceDisconnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceDisconnectArgs(%+v)", *p)
}

// Attributes:
//  - Err
type JMXServiceDisconnectResult struct {
  Err *JMXError `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewJMXServiceDisconnectResult() *JMXServiceDisconnectResult {
  return &JMXServiceDisconnectResult{}
}

var JMXServiceDisconnectResult_Err_DEFAULT *JMXError
func (p *JMXServiceDisconnectResult) GetErr() *JMXError {
  if !p.IsSetErr() {
    return JMXServiceDisconnectResult_Err_DEFAULT
  }
return p.Err
}
func (p *JMXServiceDisconnectResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *JMXServiceDisconnectResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceDisconnectResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &JMXError{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *JMXServiceDisconnectResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "disconnect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceDisconnectResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *JMXServiceDisconnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceDisconnectResult(%+v)", *p)
}

// Attributes:
//  - BeanName
type JMXServiceQueryMbeanArgs struct {
  BeanName string `thrift:"beanName,1" db:"beanName" json:"beanName"`
}

func NewJMXServiceQueryMbeanArgs() *JMXServiceQueryMbeanArgs {
  return &JMXServiceQueryMbeanArgs{}
}


func (p *JMXServiceQueryMbeanArgs) GetBeanName() string {
  return p.BeanName
}
func (p *JMXServiceQueryMbeanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMbeanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BeanName = v
}
  return nil
}

func (p *JMXServiceQueryMbeanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "queryMbean_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMbeanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "beanName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:beanName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BeanName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.beanName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:beanName: ", p), err) }
  return err
}

func (p *JMXServiceQueryMbeanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMbeanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceQueryMbeanResult struct {
  Success []*JMXAttribute `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceQueryMbeanResult() *JMXServiceQueryMbeanResult {
  return &JMXServiceQueryMbeanResult{}
}

var JMXServiceQueryMbeanResult_Success_DEFAULT []*JMXAttribute

func (p *JMXServiceQueryMbeanResult) GetSuccess() []*JMXAttribute {
  return p.Success
}
var JMXServiceQueryMbeanResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceQueryMbeanResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceQueryMbeanResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceQueryMbeanResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceQueryMbeanResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceQueryMbeanResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceQueryMbeanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceQueryMbeanResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceQueryMbeanResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceQueryMbeanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMbeanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*JMXAttribute, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &JMXAttribute{}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceQueryMbeanResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMbeanResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMbeanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "queryMbean_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMbeanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMbeanResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin(ctx, "connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMbeanResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin(ctx, "jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMbeanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMbeanResult(%+v)", *p)
}

type JMXServiceGetLogsArgs struct {
}

func NewJMXServiceGetLogsArgs() *JMXServiceGetLogsArgs {
  return &JMXServiceGetLogsArgs{}
}

func (p *JMXServiceGetLogsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetLogsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLogs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetLogsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetLogsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type JMXServiceGetLogsResult struct {
  Success []*LogMessage `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewJMXServiceGetLogsResult() *JMXServiceGetLogsResult {
  return &JMXServiceGetLogsResult{}
}

var JMXServiceGetLogsResult_Success_DEFAULT []*LogMessage

func (p *JMXServiceGetLogsResult) GetSuccess() []*LogMessage {
  return p.Success
}
func (p *JMXServiceGetLogsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceGetLogsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetLogsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LogMessage, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &LogMessage{}
    if err := _elem15.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.Success = append(p.Success, _elem15)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceGetLogsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLogs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetLogsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetLogsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetLogsResult(%+v)", *p)
}


