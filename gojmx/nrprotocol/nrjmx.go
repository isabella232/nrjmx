// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package nrprotocol

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ValueType int64

const (
	ValueType_STRING ValueType = 1
	ValueType_DOUBLE ValueType = 2
	ValueType_INT    ValueType = 3
	ValueType_BOOL   ValueType = 4
)

func (p ValueType) String() string {
	switch p {
	case ValueType_STRING:
		return "STRING"
	case ValueType_DOUBLE:
		return "DOUBLE"
	case ValueType_INT:
		return "INT"
	case ValueType_BOOL:
		return "BOOL"
	}
	return "<UNSET>"
}

func ValueTypeFromString(s string) (ValueType, error) {
	switch s {
	case "STRING":
		return ValueType_STRING, nil
	case "DOUBLE":
		return ValueType_DOUBLE, nil
	case "INT":
		return ValueType_INT, nil
	case "BOOL":
		return ValueType_BOOL, nil
	}
	return ValueType(0), fmt.Errorf("not a valid ValueType string")
}

func ValueTypePtr(v ValueType) *ValueType { return &v }

func (p ValueType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ValueType) UnmarshalText(text []byte) error {
	q, err := ValueTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ValueType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ValueType(v)
	return nil
}

func (p *ValueType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - ConnectionURL
//  - Hostname
//  - Port
//  - UriPath
//  - Username
//  - Password
//  - KeyStore
//  - KeyStorePassword
//  - TrustStore
//  - TrustStorePassword
//  - IsRemote
//  - IsJBossStandaloneMode
type JMXConfig struct {
	ConnectionURL         string `thrift:"connectionURL,1" db:"connectionURL" json:"connectionURL"`
	Hostname              string `thrift:"hostname,2" db:"hostname" json:"hostname"`
	Port                  int32  `thrift:"port,3" db:"port" json:"port"`
	UriPath               string `thrift:"uriPath,4" db:"uriPath" json:"uriPath"`
	Username              string `thrift:"username,5" db:"username" json:"username"`
	Password              string `thrift:"password,6" db:"password" json:"password"`
	KeyStore              string `thrift:"keyStore,7" db:"keyStore" json:"keyStore"`
	KeyStorePassword      string `thrift:"keyStorePassword,8" db:"keyStorePassword" json:"keyStorePassword"`
	TrustStore            string `thrift:"trustStore,9" db:"trustStore" json:"trustStore"`
	TrustStorePassword    string `thrift:"trustStorePassword,10" db:"trustStorePassword" json:"trustStorePassword"`
	IsRemote              bool   `thrift:"isRemote,11" db:"isRemote" json:"isRemote"`
	IsJBossStandaloneMode bool   `thrift:"isJBossStandaloneMode,12" db:"isJBossStandaloneMode" json:"isJBossStandaloneMode"`
}

func NewJMXConfig() *JMXConfig {
	return &JMXConfig{}
}

func (p *JMXConfig) GetConnectionURL() string {
	return p.ConnectionURL
}

func (p *JMXConfig) GetHostname() string {
	return p.Hostname
}

func (p *JMXConfig) GetPort() int32 {
	return p.Port
}

func (p *JMXConfig) GetUriPath() string {
	return p.UriPath
}

func (p *JMXConfig) GetUsername() string {
	return p.Username
}

func (p *JMXConfig) GetPassword() string {
	return p.Password
}

func (p *JMXConfig) GetKeyStore() string {
	return p.KeyStore
}

func (p *JMXConfig) GetKeyStorePassword() string {
	return p.KeyStorePassword
}

func (p *JMXConfig) GetTrustStore() string {
	return p.TrustStore
}

func (p *JMXConfig) GetTrustStorePassword() string {
	return p.TrustStorePassword
}

func (p *JMXConfig) GetIsRemote() bool {
	return p.IsRemote
}

func (p *JMXConfig) GetIsJBossStandaloneMode() bool {
	return p.IsJBossStandaloneMode
}
func (p *JMXConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXConfig) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ConnectionURL = v
	}
	return nil
}

func (p *JMXConfig) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *JMXConfig) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *JMXConfig) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UriPath = v
	}
	return nil
}

func (p *JMXConfig) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *JMXConfig) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *JMXConfig) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.KeyStore = v
	}
	return nil
}

func (p *JMXConfig) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.KeyStorePassword = v
	}
	return nil
}

func (p *JMXConfig) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TrustStore = v
	}
	return nil
}

func (p *JMXConfig) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.TrustStorePassword = v
	}
	return nil
}

func (p *JMXConfig) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IsRemote = v
	}
	return nil
}

func (p *JMXConfig) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.IsJBossStandaloneMode = v
	}
	return nil
}

func (p *JMXConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JMXConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("connectionURL", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connectionURL: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConnectionURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.connectionURL (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connectionURL: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Hostname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostname: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uriPath", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uriPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.UriPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uriPath (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uriPath: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:username: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:password: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyStore", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:keyStore: ", p), err)
	}
	if err := oprot.WriteString(string(p.KeyStore)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyStore (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:keyStore: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyStorePassword", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:keyStorePassword: ", p), err)
	}
	if err := oprot.WriteString(string(p.KeyStorePassword)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyStorePassword (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:keyStorePassword: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trustStore", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:trustStore: ", p), err)
	}
	if err := oprot.WriteString(string(p.TrustStore)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trustStore (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:trustStore: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trustStorePassword", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:trustStorePassword: ", p), err)
	}
	if err := oprot.WriteString(string(p.TrustStorePassword)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trustStorePassword (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:trustStorePassword: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isRemote", thrift.BOOL, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:isRemote: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsRemote)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isRemote (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:isRemote: ", p), err)
	}
	return err
}

func (p *JMXConfig) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isJBossStandaloneMode", thrift.BOOL, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isJBossStandaloneMode: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsJBossStandaloneMode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isJBossStandaloneMode (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isJBossStandaloneMode: ", p), err)
	}
	return err
}

func (p *JMXConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXConfig(%+v)", *p)
}

// Attributes:
//  - Attribute
//  - ValueType
//  - StringValue
//  - DoubleValue
//  - IntValue
//  - BoolValue
type JMXAttribute struct {
	Attribute   string    `thrift:"attribute,1" db:"attribute" json:"attribute"`
	ValueType   ValueType `thrift:"valueType,2" db:"valueType" json:"valueType"`
	StringValue string    `thrift:"stringValue,3" db:"stringValue" json:"stringValue"`
	DoubleValue float64   `thrift:"doubleValue,4" db:"doubleValue" json:"doubleValue"`
	IntValue    int64     `thrift:"intValue,5" db:"intValue" json:"intValue"`
	BoolValue   bool      `thrift:"boolValue,6" db:"boolValue" json:"boolValue"`
}

func NewJMXAttribute() *JMXAttribute {
	return &JMXAttribute{}
}

func (p *JMXAttribute) GetAttribute() string {
	return p.Attribute
}

func (p *JMXAttribute) GetValueType() ValueType {
	return p.ValueType
}

func (p *JMXAttribute) GetStringValue() string {
	return p.StringValue
}

func (p *JMXAttribute) GetDoubleValue() float64 {
	return p.DoubleValue
}

func (p *JMXAttribute) GetIntValue() int64 {
	return p.IntValue
}

func (p *JMXAttribute) GetBoolValue() bool {
	return p.BoolValue
}
func (p *JMXAttribute) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXAttribute) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Attribute = v
	}
	return nil
}

func (p *JMXAttribute) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ValueType(v)
		p.ValueType = temp
	}
	return nil
}

func (p *JMXAttribute) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StringValue = v
	}
	return nil
}

func (p *JMXAttribute) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DoubleValue = v
	}
	return nil
}

func (p *JMXAttribute) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IntValue = v
	}
	return nil
}

func (p *JMXAttribute) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BoolValue = v
	}
	return nil
}

func (p *JMXAttribute) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JMXAttribute"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXAttribute) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attribute", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:attribute: ", p), err)
	}
	if err := oprot.WriteString(string(p.Attribute)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attribute (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:attribute: ", p), err)
	}
	return err
}

func (p *JMXAttribute) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("valueType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:valueType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ValueType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.valueType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:valueType: ", p), err)
	}
	return err
}

func (p *JMXAttribute) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stringValue: ", p), err)
	}
	if err := oprot.WriteString(string(p.StringValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stringValue (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stringValue: ", p), err)
	}
	return err
}

func (p *JMXAttribute) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("doubleValue", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:doubleValue: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DoubleValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.doubleValue (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:doubleValue: ", p), err)
	}
	return err
}

func (p *JMXAttribute) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("intValue", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:intValue: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.IntValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.intValue (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:intValue: ", p), err)
	}
	return err
}

func (p *JMXAttribute) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:boolValue: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.BoolValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.boolValue (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:boolValue: ", p), err)
	}
	return err
}

func (p *JMXAttribute) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXAttribute(%+v)", *p)
}

// Attributes:
//  - Message
type LogMessage struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewLogMessage() *LogMessage {
	return &LogMessage{}
}

func (p *LogMessage) GetMessage() string {
	return p.Message
}
func (p *LogMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LogMessage) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *LogMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LogMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LogMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *LogMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogMessage(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
type JMXError struct {
	Code    *int32 `thrift:"code,1" db:"code" json:"code,omitempty"`
	Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewJMXError() *JMXError {
	return &JMXError{}
}

var JMXError_Code_DEFAULT int32

func (p *JMXError) GetCode() int32 {
	if !p.IsSetCode() {
		return JMXError_Code_DEFAULT
	}
	return *p.Code
}

func (p *JMXError) GetMessage() string {
	return p.Message
}
func (p *JMXError) IsSetCode() bool {
	return p.Code != nil
}

func (p *JMXError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = &v
	}
	return nil
}

func (p *JMXError) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *JMXError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JMXError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Code)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
		}
	}
	return err
}

func (p *JMXError) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *JMXError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXError(%+v)", *p)
}

func (p *JMXError) Error() string {
	return p.String()
}

// Attributes:
//  - Code
//  - Message
type JMXConnectionError struct {
	Code    int32  `thrift:"code,1" db:"code" json:"code"`
	Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewJMXConnectionError() *JMXConnectionError {
	return &JMXConnectionError{}
}

func (p *JMXConnectionError) GetCode() int32 {
	return p.Code
}

func (p *JMXConnectionError) GetMessage() string {
	return p.Message
}
func (p *JMXConnectionError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXConnectionError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *JMXConnectionError) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *JMXConnectionError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JMXConnectionError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXConnectionError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *JMXConnectionError) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *JMXConnectionError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXConnectionError(%+v)", *p)
}

func (p *JMXConnectionError) Error() string {
	return p.String()
}

type JMXService interface {
	Ping(ctx context.Context) (err error)
	// Parameters:
	//  - Config
	//  - TimeoutMs
	Connect(ctx context.Context, config *JMXConfig, timeoutMs int64) (err error)
	Disconnect(ctx context.Context) (err error)
	// Parameters:
	//  - BeanName
	//  - TimeoutMs
	QueryMbean(ctx context.Context, beanName string, timeoutMs int64) (r []*JMXAttribute, err error)
}

type JMXServiceClient struct {
	c thrift.TClient
}

func NewJMXServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *JMXServiceClient {
	return &JMXServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewJMXServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *JMXServiceClient {
	return &JMXServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewJMXServiceClient(c thrift.TClient) *JMXServiceClient {
	return &JMXServiceClient{
		c: c,
	}
}

func (p *JMXServiceClient) Client_() thrift.TClient {
	return p.c
}
func (p *JMXServiceClient) Ping(ctx context.Context) (err error) {
	var _args0 JMXServicePingArgs
	var _result1 JMXServicePingResult
	if err = p.Client_().Call(ctx, "ping", &_args0, &_result1); err != nil {
		return
	}
	switch {
	case _result1.Err != nil:
		return _result1.Err
	}

	return nil
}

// Parameters:
//  - Config
//  - TimeoutMs
func (p *JMXServiceClient) Connect(ctx context.Context, config *JMXConfig, timeoutMs int64) (err error) {
	var _args2 JMXServiceConnectArgs
	_args2.Config = config
	_args2.TimeoutMs = timeoutMs
	var _result3 JMXServiceConnectResult
	if err = p.Client_().Call(ctx, "connect", &_args2, &_result3); err != nil {
		return
	}
	switch {
	case _result3.ConnErr != nil:
		return _result3.ConnErr
	case _result3.JmxErr != nil:
		return _result3.JmxErr
	}

	return nil
}

func (p *JMXServiceClient) Disconnect(ctx context.Context) (err error) {
	var _args4 JMXServiceDisconnectArgs
	var _result5 JMXServiceDisconnectResult
	if err = p.Client_().Call(ctx, "disconnect", &_args4, &_result5); err != nil {
		return
	}
	switch {
	case _result5.Err != nil:
		return _result5.Err
	}

	return nil
}

// Parameters:
//  - BeanName
//  - TimeoutMs
func (p *JMXServiceClient) QueryMbean(ctx context.Context, beanName string, timeoutMs int64) (r []*JMXAttribute, err error) {
	var _args6 JMXServiceQueryMbeanArgs
	_args6.BeanName = beanName
	_args6.TimeoutMs = timeoutMs
	var _result7 JMXServiceQueryMbeanResult
	if err = p.Client_().Call(ctx, "queryMbean", &_args6, &_result7); err != nil {
		return
	}
	switch {
	case _result7.ConnErr != nil:
		return r, _result7.ConnErr
	case _result7.JmxErr != nil:
		return r, _result7.JmxErr
	}

	return _result7.GetSuccess(), nil
}

type JMXServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      JMXService
}

func (p *JMXServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *JMXServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *JMXServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewJMXServiceProcessor(handler JMXService) *JMXServiceProcessor {

	self8 := &JMXServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["ping"] = &jMXServiceProcessorPing{handler: handler}
	self8.processorMap["connect"] = &jMXServiceProcessorConnect{handler: handler}
	self8.processorMap["disconnect"] = &jMXServiceProcessorDisconnect{handler: handler}
	self8.processorMap["queryMbean"] = &jMXServiceProcessorQueryMbean{handler: handler}
	return self8
}

func (p *JMXServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x9

}

type jMXServiceProcessorPing struct {
	handler JMXService
}

func (p *jMXServiceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := JMXServicePingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := JMXServicePingResult{}
	var err2 error
	if err2 = p.handler.Ping(ctx); err2 != nil {
		switch v := err2.(type) {
		case *JMXError:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
			oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type jMXServiceProcessorConnect struct {
	handler JMXService
}

func (p *jMXServiceProcessorConnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := JMXServiceConnectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := JMXServiceConnectResult{}
	var err2 error
	if err2 = p.handler.Connect(ctx, args.Config, args.TimeoutMs); err2 != nil {
		switch v := err2.(type) {
		case *JMXConnectionError:
			result.ConnErr = v
		case *JMXError:
			result.JmxErr = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing connect: "+err2.Error())
			oprot.WriteMessageBegin("connect", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("connect", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type jMXServiceProcessorDisconnect struct {
	handler JMXService
}

func (p *jMXServiceProcessorDisconnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := JMXServiceDisconnectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := JMXServiceDisconnectResult{}
	var err2 error
	if err2 = p.handler.Disconnect(ctx); err2 != nil {
		switch v := err2.(type) {
		case *JMXError:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: "+err2.Error())
			oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("disconnect", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type jMXServiceProcessorQueryMbean struct {
	handler JMXService
}

func (p *jMXServiceProcessorQueryMbean) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := JMXServiceQueryMbeanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryMbean", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := JMXServiceQueryMbeanResult{}
	var retval []*JMXAttribute
	var err2 error
	if retval, err2 = p.handler.QueryMbean(ctx, args.BeanName, args.TimeoutMs); err2 != nil {
		switch v := err2.(type) {
		case *JMXConnectionError:
			result.ConnErr = v
		case *JMXError:
			result.JmxErr = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMbean: "+err2.Error())
			oprot.WriteMessageBegin("queryMbean", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryMbean", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type JMXServicePingArgs struct {
}

func NewJMXServicePingArgs() *JMXServicePingArgs {
	return &JMXServicePingArgs{}
}

func (p *JMXServicePingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXServicePingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Err
type JMXServicePingResult struct {
	Err *JMXError `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewJMXServicePingResult() *JMXServicePingResult {
	return &JMXServicePingResult{}
}

var JMXServicePingResult_Err_DEFAULT *JMXError

func (p *JMXServicePingResult) GetErr() *JMXError {
	if !p.IsSetErr() {
		return JMXServicePingResult_Err_DEFAULT
	}
	return p.Err
}
func (p *JMXServicePingResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *JMXServicePingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXServicePingResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &JMXError{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *JMXServicePingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXServicePingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
		}
	}
	return err
}

func (p *JMXServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXServicePingResult(%+v)", *p)
}

// Attributes:
//  - Config
//  - TimeoutMs
type JMXServiceConnectArgs struct {
	Config    *JMXConfig `thrift:"config,1" db:"config" json:"config"`
	TimeoutMs int64      `thrift:"timeoutMs,2" db:"timeoutMs" json:"timeoutMs"`
}

func NewJMXServiceConnectArgs() *JMXServiceConnectArgs {
	return &JMXServiceConnectArgs{}
}

var JMXServiceConnectArgs_Config_DEFAULT *JMXConfig

func (p *JMXServiceConnectArgs) GetConfig() *JMXConfig {
	if !p.IsSetConfig() {
		return JMXServiceConnectArgs_Config_DEFAULT
	}
	return p.Config
}

func (p *JMXServiceConnectArgs) GetTimeoutMs() int64 {
	return p.TimeoutMs
}
func (p *JMXServiceConnectArgs) IsSetConfig() bool {
	return p.Config != nil
}

func (p *JMXServiceConnectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXServiceConnectArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Config = &JMXConfig{}
	if err := p.Config.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
	}
	return nil
}

func (p *JMXServiceConnectArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TimeoutMs = v
	}
	return nil
}

func (p *JMXServiceConnectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("connect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXServiceConnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err)
	}
	if err := p.Config.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err)
	}
	return err
}

func (p *JMXServiceConnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timeoutMs", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeoutMs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TimeoutMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeoutMs (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeoutMs: ", p), err)
	}
	return err
}

func (p *JMXServiceConnectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXServiceConnectArgs(%+v)", *p)
}

// Attributes:
//  - ConnErr
//  - JmxErr
type JMXServiceConnectResult struct {
	ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
	JmxErr  *JMXError           `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceConnectResult() *JMXServiceConnectResult {
	return &JMXServiceConnectResult{}
}

var JMXServiceConnectResult_ConnErr_DEFAULT *JMXConnectionError

func (p *JMXServiceConnectResult) GetConnErr() *JMXConnectionError {
	if !p.IsSetConnErr() {
		return JMXServiceConnectResult_ConnErr_DEFAULT
	}
	return p.ConnErr
}

var JMXServiceConnectResult_JmxErr_DEFAULT *JMXError

func (p *JMXServiceConnectResult) GetJmxErr() *JMXError {
	if !p.IsSetJmxErr() {
		return JMXServiceConnectResult_JmxErr_DEFAULT
	}
	return p.JmxErr
}
func (p *JMXServiceConnectResult) IsSetConnErr() bool {
	return p.ConnErr != nil
}

func (p *JMXServiceConnectResult) IsSetJmxErr() bool {
	return p.JmxErr != nil
}

func (p *JMXServiceConnectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXServiceConnectResult) ReadField1(iprot thrift.TProtocol) error {
	p.ConnErr = &JMXConnectionError{}
	if err := p.ConnErr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
	}
	return nil
}

func (p *JMXServiceConnectResult) ReadField2(iprot thrift.TProtocol) error {
	p.JmxErr = &JMXError{}
	if err := p.JmxErr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
	}
	return nil
}

func (p *JMXServiceConnectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("connect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXServiceConnectResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnErr() {
		if err := oprot.WriteFieldBegin("connErr", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err)
		}
		if err := p.ConnErr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err)
		}
	}
	return err
}

func (p *JMXServiceConnectResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJmxErr() {
		if err := oprot.WriteFieldBegin("jmxErr", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err)
		}
		if err := p.JmxErr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err)
		}
	}
	return err
}

func (p *JMXServiceConnectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXServiceConnectResult(%+v)", *p)
}

type JMXServiceDisconnectArgs struct {
}

func NewJMXServiceDisconnectArgs() *JMXServiceDisconnectArgs {
	return &JMXServiceDisconnectArgs{}
}

func (p *JMXServiceDisconnectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXServiceDisconnectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disconnect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXServiceDisconnectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXServiceDisconnectArgs(%+v)", *p)
}

// Attributes:
//  - Err
type JMXServiceDisconnectResult struct {
	Err *JMXError `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewJMXServiceDisconnectResult() *JMXServiceDisconnectResult {
	return &JMXServiceDisconnectResult{}
}

var JMXServiceDisconnectResult_Err_DEFAULT *JMXError

func (p *JMXServiceDisconnectResult) GetErr() *JMXError {
	if !p.IsSetErr() {
		return JMXServiceDisconnectResult_Err_DEFAULT
	}
	return p.Err
}
func (p *JMXServiceDisconnectResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *JMXServiceDisconnectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXServiceDisconnectResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &JMXError{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *JMXServiceDisconnectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disconnect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXServiceDisconnectResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
		}
	}
	return err
}

func (p *JMXServiceDisconnectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXServiceDisconnectResult(%+v)", *p)
}

// Attributes:
//  - BeanName
//  - TimeoutMs
type JMXServiceQueryMbeanArgs struct {
	BeanName  string `thrift:"beanName,1" db:"beanName" json:"beanName"`
	TimeoutMs int64  `thrift:"timeoutMs,2" db:"timeoutMs" json:"timeoutMs"`
}

func NewJMXServiceQueryMbeanArgs() *JMXServiceQueryMbeanArgs {
	return &JMXServiceQueryMbeanArgs{}
}

func (p *JMXServiceQueryMbeanArgs) GetBeanName() string {
	return p.BeanName
}

func (p *JMXServiceQueryMbeanArgs) GetTimeoutMs() int64 {
	return p.TimeoutMs
}
func (p *JMXServiceQueryMbeanArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXServiceQueryMbeanArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BeanName = v
	}
	return nil
}

func (p *JMXServiceQueryMbeanArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TimeoutMs = v
	}
	return nil
}

func (p *JMXServiceQueryMbeanArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMbean_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXServiceQueryMbeanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("beanName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:beanName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BeanName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.beanName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:beanName: ", p), err)
	}
	return err
}

func (p *JMXServiceQueryMbeanArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timeoutMs", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeoutMs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TimeoutMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeoutMs (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeoutMs: ", p), err)
	}
	return err
}

func (p *JMXServiceQueryMbeanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXServiceQueryMbeanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceQueryMbeanResult struct {
	Success []*JMXAttribute     `thrift:"success,0" db:"success" json:"success,omitempty"`
	ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
	JmxErr  *JMXError           `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceQueryMbeanResult() *JMXServiceQueryMbeanResult {
	return &JMXServiceQueryMbeanResult{}
}

var JMXServiceQueryMbeanResult_Success_DEFAULT []*JMXAttribute

func (p *JMXServiceQueryMbeanResult) GetSuccess() []*JMXAttribute {
	return p.Success
}

var JMXServiceQueryMbeanResult_ConnErr_DEFAULT *JMXConnectionError

func (p *JMXServiceQueryMbeanResult) GetConnErr() *JMXConnectionError {
	if !p.IsSetConnErr() {
		return JMXServiceQueryMbeanResult_ConnErr_DEFAULT
	}
	return p.ConnErr
}

var JMXServiceQueryMbeanResult_JmxErr_DEFAULT *JMXError

func (p *JMXServiceQueryMbeanResult) GetJmxErr() *JMXError {
	if !p.IsSetJmxErr() {
		return JMXServiceQueryMbeanResult_JmxErr_DEFAULT
	}
	return p.JmxErr
}
func (p *JMXServiceQueryMbeanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *JMXServiceQueryMbeanResult) IsSetConnErr() bool {
	return p.ConnErr != nil
}

func (p *JMXServiceQueryMbeanResult) IsSetJmxErr() bool {
	return p.JmxErr != nil
}

func (p *JMXServiceQueryMbeanResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JMXServiceQueryMbeanResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*JMXAttribute, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &JMXAttribute{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Success = append(p.Success, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *JMXServiceQueryMbeanResult) ReadField1(iprot thrift.TProtocol) error {
	p.ConnErr = &JMXConnectionError{}
	if err := p.ConnErr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
	}
	return nil
}

func (p *JMXServiceQueryMbeanResult) ReadField2(iprot thrift.TProtocol) error {
	p.JmxErr = &JMXError{}
	if err := p.JmxErr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
	}
	return nil
}

func (p *JMXServiceQueryMbeanResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMbean_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JMXServiceQueryMbeanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *JMXServiceQueryMbeanResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnErr() {
		if err := oprot.WriteFieldBegin("connErr", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err)
		}
		if err := p.ConnErr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err)
		}
	}
	return err
}

func (p *JMXServiceQueryMbeanResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJmxErr() {
		if err := oprot.WriteFieldBegin("jmxErr", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err)
		}
		if err := p.JmxErr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err)
		}
	}
	return err
}

func (p *JMXServiceQueryMbeanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JMXServiceQueryMbeanResult(%+v)", *p)
}
